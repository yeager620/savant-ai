#!/bin/bash

# Batch process existing screenshots with compression and analysis
# Usage: ./process-screenshots [options]

set -e

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$SCRIPT_DIR"

# Default values
SCREENSHOTS_DIR="$HOME/Library/Application Support/savant-ai/video-captures/2025-07-02"
ENABLE_OCR=true
ENABLE_VISION=true
PROCESS_INTERVAL=3
VERBOSE=true
DB_PATH="$HOME/.config/savant-ai/transcripts.db"

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

usage() {
    echo "Usage: $0 [options]"
    echo ""
    echo "Options:"
    echo "  -d, --dir DIR           Screenshots directory (default: $SCREENSHOTS_DIR)"
    echo "  --no-ocr                Disable OCR processing"
    echo "  --no-vision             Disable computer vision analysis"
    echo "  -i, --interval N        Process every Nth file for analysis (default: $PROCESS_INTERVAL)"
    echo "  -q, --quiet             Disable verbose output"
    echo "  --db-path PATH          Database path (default: $DB_PATH)"
    echo "  -h, --help              Show this help"
    echo ""
    echo "Examples:"
    echo "  $0                                    # Process all screenshots with defaults"
    echo "  $0 --no-vision -i 5                 # OCR only, process every 5th file"
    echo "  $0 -d ~/Downloads/screenshots        # Process specific directory"
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -d|--dir)
            SCREENSHOTS_DIR="$2"
            shift 2
            ;;
        --no-ocr)
            ENABLE_OCR=false
            shift
            ;;
        --no-vision)
            ENABLE_VISION=false
            shift
            ;;
        -i|--interval)
            PROCESS_INTERVAL="$2"
            shift 2
            ;;
        -q|--quiet)
            VERBOSE=false
            shift
            ;;
        --db-path)
            DB_PATH="$2"
            shift 2
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            usage
            exit 1
            ;;
    esac
done

echo -e "${GREEN}Screenshot Processing Tool${NC}"
echo -e "=========================="
echo -e "Screenshots directory: ${YELLOW}$SCREENSHOTS_DIR${NC}"
echo -e "OCR enabled: ${YELLOW}$ENABLE_OCR${NC}"
echo -e "Vision analysis enabled: ${YELLOW}$ENABLE_VISION${NC}"
echo -e "Processing interval: ${YELLOW}$PROCESS_INTERVAL${NC}"
echo -e "Verbose output: ${YELLOW}$VERBOSE${NC}"
echo -e "Database: ${YELLOW}$DB_PATH${NC}"
echo ""

# Check if directory exists
if [ ! -d "$SCREENSHOTS_DIR" ]; then
    echo -e "${RED}Error: Directory '$SCREENSHOTS_DIR' does not exist${NC}"
    exit 1
fi

# Count PNG files
PNG_COUNT=$(find "$SCREENSHOTS_DIR" -name "*.png" -not -name "*_compressed*" | wc -l)
echo -e "Found ${YELLOW}$PNG_COUNT${NC} PNG files to process"

if [ "$PNG_COUNT" -eq 0 ]; then
    echo -e "${YELLOW}No PNG files found to process${NC}"
    exit 0
fi

# Estimate processing time and storage
ESTIMATED_TIME_MINUTES=$((PNG_COUNT * 2 / 60))  # Rough estimate: 2 seconds per file
ESTIMATED_STORAGE_MB=$((PNG_COUNT * 3))         # Rough estimate: 3MB per file

echo -e "Estimated processing time: ${YELLOW}${ESTIMATED_TIME_MINUTES} minutes${NC}"
echo -e "Estimated storage usage: ${YELLOW}${ESTIMATED_STORAGE_MB} MB${NC}"
echo ""

# Ask for confirmation
read -p "Continue with batch processing? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Processing cancelled"
    exit 0
fi

# Build the binary if needed
echo -e "${GREEN}Building video processor...${NC}"
if ! cargo build --package savant-video-processor --release; then
    echo -e "${RED}Failed to build savant-video-processor${NC}"
    exit 1
fi

# Construct command arguments
ARGS=(
    "batch"
    "--input-dir" "$SCREENSHOTS_DIR"
    "--process-interval" "$PROCESS_INTERVAL"
    "--db-path" "$DB_PATH"
)

if [ "$ENABLE_OCR" = true ]; then
    ARGS+=("--enable-ocr")
fi

if [ "$ENABLE_VISION" = true ]; then
    ARGS+=("--enable-vision")
fi

if [ "$VERBOSE" = true ]; then
    ARGS+=("--verbose")
fi

# Run the batch processor
echo -e "${GREEN}Starting batch processing...${NC}"
START_TIME=$(date +%s)

if ! ./target/release/savant-video-processor "${ARGS[@]}"; then
    echo -e "${RED}Batch processing failed${NC}"
    exit 1
fi

END_TIME=$(date +%s)
DURATION=$((END_TIME - START_TIME))
DURATION_MINUTES=$((DURATION / 60))
DURATION_SECONDS=$((DURATION % 60))

echo ""
echo -e "${GREEN}Batch processing completed!${NC}"
echo -e "Total time: ${YELLOW}${DURATION_MINUTES}m ${DURATION_SECONDS}s${NC}"

# Show statistics
echo ""
echo -e "${GREEN}Showing processing statistics...${NC}"
if ! ./target/release/savant-video-processor stats --db-path "$DB_PATH"; then
    echo -e "${YELLOW}Could not retrieve statistics${NC}"
fi

echo ""
echo -e "${GREEN}Processing complete!${NC}"
echo ""
echo "You can now query the processed data using:"
echo -e "  ${YELLOW}./target/release/savant-video-processor query --help${NC}"
echo ""
echo "Example queries:"
echo -e "  ${YELLOW}./target/release/savant-video-processor query --text 'error'${NC}"
echo -e "  ${YELLOW}./target/release/savant-video-processor query --app 'Code'${NC}"
echo -e "  ${YELLOW}./target/release/savant-video-processor query --format json${NC}"